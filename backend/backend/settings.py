"""
Django settings for skycook project.

Generated by "django-admin startproject" using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os

# Build paths inside the project like this: BASE_DIR / "subdir".
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-v8osa=n03%!s_-wttvj=0bv4+s-9ec5zf%ypfm0lufdqsnjmxp"

# Docker-comopse 파일에서 DEBUG 모드 설정
DEBUG = True if os.getenv("DEBUG_MODE", "True") == "True" else False

# Django Cors Headers 설정 추가
ALLOWED_HOSTS = ["*"]
CORS_ALLOW_CREDENTIALS = True
if DEBUG:
    CORS_ORIGIN_ALLOW_ALL = True
else:
    CORS_ORIGIN_ALLOW_ALL = False
    # TODO: 배포 시 도메인 변경
    CORS_ALLOWED_ORIGINS = ["http://example.com"]
    CSRF_TRUSTED_ORIGINS = ["http://*.example.com"]

AUTH_USER_MODEL = "account.CustomUser"

# Application definition
INSTALLED_APPS = [
    "channels",  # channels 에서 runserver 명령을 대체시키므로 다른 앱에 비해 우선순위를 높게함
    "daphne",  # channels 4.0 부터 django 의 기존 runserver 가 daphne 앱에서 재정의하여 동작
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # third partys
    "corsheaders",
    "rest_framework",
    # local apps
    "account",
    # channels test apps
    "integers",
    "chat",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # django-cors-headers 추가
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR.joinpath("templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"
ASGI_APPLICATION = "backend.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [{"host": "192.168.2.100", "port": 4120, "password": "channelstest"}],
        },
    },
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {  # docker-compose.db.dev.yml 파일로 생성한 postgres 접속정보
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_DB"),
        "USER": os.environ.get("POSTGRES_USER"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "HOST": os.environ.get("POSTGRES_HOST"),
        "PORT": os.environ.get("POSTGRES_PORT"),
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "auth.custom_authentication.CustomCommonAuthentication",
    ],
}

SESSION_COOKIE_AGE = 604800  # 쿠키 유지기간 7일
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # 브라우저 닫을때 세션쿠키 삭제 여부
SESSION_COOKIE_HTTPONLY = True  # True일 시 세션쿠키 HTTP 전용으로 사용
SESSION_COOKIE_SECURE = False if DEBUG else True  # True일때 세션쿠키가 HTTPS연결을 통해서만 전송

AUTH_COOKIE_AGE = timedelta(seconds=SESSION_COOKIE_AGE)  # SESSION_COOKIE_AGE와 동일하게 설정
AUTH_USER_ID_COOKIE = "_iu"
AUTH_COOKIE_DOMAIN = None if DEBUG else ".example.com"  # TODO: 배포 시 도메인 변경
AUTH_COOKIE_SECURE = False if DEBUG else True
AUTH_COOKIE_HTTP_ONLY = False
AUTH_COOKIE_SAMESITE = "Lax"
